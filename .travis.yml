
################################################################################
#
#  Copyright (c) 2019, Perry L Miller IV
#  All rights reserved.
#  MIT License: https://opensource.org/licenses/mit-license.html
#
################################################################################

################################################################################
#
#  Continuous integration configuration file.
#
#  These references helped:
#  https://docs.travis-ci.com/user/languages/cpp/
#  https://cmake.org/cmake/help/v3.12/release/3.12.html
#  https://github.com/richelbilderbeek/travis_cpp_tutorial/blob/master/.travis.yml
#  https://stackoverflow.com/questions/41916656/how-to-use-travis-ci-to-build-modern-c-using-modern-cmake
#
################################################################################

# This flavor of linux comes with the version of cmake we need.
# We use the add_compile_definitions command in a CMakeLists.txt file.
# https://cmake.org/cmake/help/v3.12/release/3.12.html
# https://docs.travis-ci.com/user/languages/cpp/
dist: xenial

# We're compiling C++ code.
language: cpp

# We install things so we need sudo.
sudo: required

# We need gcc version 7 because we are using C++17 features.
# https://stackoverflow.com/questions/41916656/how-to-use-travis-ci-to-build-modern-c-using-modern-cmake
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - gcc-7
      - g++-7

# Install what we need.
install:
- sudo pip install gcovr
- sudo apt-get --assume-yes install libgl1-mesa-dev
- sudo apt-get --assume-yes install libopenscenegraph-dev

# The sequence of commands that get executed.
script:

# Use the new gcc installed above:
- export CC=gcc-7
- export CXX=g++-7

# Set up (most of) the environment.
- export THIS_PROJECT_DIR=`pwd`
- cd ..
- export EXTERNAL_DIR=`pwd`/external
- mkdir -p ${EXTERNAL_DIR}
- export CATCH2_INC_DIR=${EXTERNAL_DIR}

# Set up Catch2 in the home directory so that gcovr does not analyze it too.
- mkdir -p ${CATCH2_INC_DIR}/catch2
- curl https://raw.githubusercontent.com/catchorg/Catch2/master/single_include/catch2/catch.hpp > ${CATCH2_INC_DIR}/catch2/catch.hpp

# Set up Usul in the home directory so that gcovr does not analyze it too.
- cd ${EXTERNAL_DIR}
- git clone https://github.com/perryiv/usul.git
- cd usul
- git checkout ${TRAVIS_BRANCH}
- mkdir build
- cd build
- cmake ../ -DCMAKE_VERBOSE_MAKEFILE=ON -DUSUL_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE="Release"
- cmake --build .

# Is this needed?
# - cd ..
# - rm -rf build
# - mkdir build
# - cd build
# - cmake ../ -DCMAKE_VERBOSE_MAKEFILE=ON -DUSUL_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE="Debug"
# - cmake --build .

# Go back to the directory where we started.
- cd ${THIS_PROJECT_DIR}

# Now we can run our script.
- sh run_tests.sh
