
################################################################################
#
#  Copyright (c) 2019, Perry L Miller IV
#  All rights reserved.
#  MIT License: https://opensource.org/licenses/mit-license.html
#
################################################################################

################################################################################
#
#  Continuous integration configuration file.
#
#  These references helped:
#  https://docs.travis-ci.com/user/languages/cpp/
#  https://github.com/richelbilderbeek/travis_cpp_tutorial/blob/master/.travis.yml
#
################################################################################

# We're compiling C++ code.
language: cpp

# For now we're only using this compiler.
compiler: gcc

# This flavor of linux comes with the version of cmake and gcc we need.
# We use the add_compile_definitions command in a CMakeLists.txt file.
# https://cmake.org/cmake/help/v3.12/release/3.12.html
# https://docs.travis-ci.com/user/languages/cpp/
dist: xenial

# We install things so we need sudo.
sudo: required

# Install what we need.
install:
- sudo pip install gcovr
- sudo apt-get --assume-yes install libopenscenegraph-dev

# The sequence of commands that get executed.
script:

# Set up Catch2 in the home directory so that gcovr does not analyze it too.
- export CATCH2_INC_DIR=${HOME}/external
- mkdir -p ${CATCH2_INC_DIR}/catch2
- curl https://raw.githubusercontent.com/catchorg/Catch2/master/single_include/catch2/catch.hpp > ${CATCH2_INC_DIR}/catch2/catch.hpp

# Set up (most of) the environment.
- export LOCAL_DEV_LIB_DIR=${HOME}/local_dev_output
- export LOCAL_DEV_BIN_DIR=${HOME}/local_dev_output
- export USUL_LIB_DIR=${LOCAL_DEV_LIB_DIR}
- export USUL_BIN_DIR=${LOCAL_DEV_BIN_DIR}
- export OSG_TOOLS_LIB_DIR=${LOCAL_DEV_LIB_DIR}
- export OSG_TOOLS_BIN_DIR=${LOCAL_DEV_BIN_DIR}

# Set up Usul in the home directory so that gcovr does not analyze it too.
- pushd .
- cd ${HOME}
- git clone https://github.com/perryiv/usul.git
- cd usul
- export USUL_INC_DIR=`pwd`/source
- mkdir build
- cd build
- cmake ../ -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE="Release" -DUSUL_ENABLE_CODE_COVERAGE=OFF
- cmake --build .
- cd ..
- rm -rf build
- mkdir build
- cd build
- cmake ../ -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE="Debug" -DUSUL_ENABLE_CODE_COVERAGE=OFF
- cmake --build .
- popd

# Now we can run our script.
- sh run_tests.sh
