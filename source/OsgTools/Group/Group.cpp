
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2019, Perry L. Miller IV
//  All rights reserved.
//  MIT License: https://opensource.org/licenses/mit-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Class for working with an osg::Group.
//
///////////////////////////////////////////////////////////////////////////////

#include "OsgTools/Group/Group.h"

#include "osg/Group"


namespace OsgTools {


///////////////////////////////////////////////////////////////////////////////
//
//  Remove all the children from the group.
//
///////////////////////////////////////////////////////////////////////////////

void Group::removeAllChildren ( osg::Group *group )
{
  if ( group )
  {
    group->removeChildren ( 0, group->getNumChildren() );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Remove all occurances of the given child from the group.
//
///////////////////////////////////////////////////////////////////////////////

void Group::removeAllOccurances ( osg::Node *child, osg::Group *group )
{
  // Handle bad input.
  if ( nullptr == child || nullptr == group )
  {
    return;
  }

  // Loop until the child is no longer under the group.
  while ( group->removeChild ( child ) )
  {
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Add all the children from the group to the other.
//
///////////////////////////////////////////////////////////////////////////////

void Group::addAllChildren ( osg::Group *from, osg::Group *to )
{
  if ( from && to )
  {
    const unsigned int numChildren ( from->getNumChildren() );
    for ( unsigned int i = 0; i < numChildren; ++i )
    {
      to->addChild ( from->getChild ( i ) );
    }
  }
}


} // namespace OsgTools
